defmodule MXkcd do
  @moduledoc """
  Handels the command line parsing and dispatch to various functions
  which end up fetching a choosen xkcd comic stip with title and alt text.
  """
  @user_agent %{"User-agent" => "Elixir mxkcd@oho.io"}

  def main(argv) do
    argv
      |> parse_args
      |> process
  end

  def process(:help) do
    IO.puts """
    usage xkcd
    """
    System.halt(0)
  end
  
  def process(:tweet) do
    "http://xkcd.com/info.0.json"
      |> get
      |> decode_json
      |> build_tweet
      |> send_tweet
  end

  defp build_header(url) do
    basename = Path.basename(url)
    if File.exists?(basename) do
      Map.put(@user_agent, "If-Modified-Since", rfc2822(File.stat!(basename).mtime))
    else
      @user_agent
    end
  end

  @doc """
  `argv` can be -h or --help, which returns :help

  Otherwise it the number of the xkcd comic to fetch.
  """
  defp parse_args(argv) do
    parse = OptionParser.parse(argv, switches: [ help: :boolean],
                                     aliases:  [ h:    :help])
    case parse do
    { [ help: true ],_,_ } -> :help
    #{ _,[number],_ } -> String.to_integer(number)
    _ -> :tweet
    end
  end

  defp get(url) do
    HTTPoison.get(url, build_header(url))
  end

  defp pad(number) when number in 0..9 do
    <<?0, ?0 + number>>
  end

  defp pad(number) do
    Integer.to_string(number)
  end

  defp rfc2822({{year, month, day} = date, {hour, minute, second}}) do
    weekday_name = weekday_name(:calendar.day_of_the_week(date))
    month_name = month_name(month)
    padded_day = pad(day)
    padded_hour = pad(hour)
    padded_minute = pad(minute)
    padded_second = pad(second)
    binary_year = Integer.to_string(year)
    weekday_name <> ", " <> padded_day <>
      " " <> month_name <> " " <> binary_year <>
      " " <> padded_hour <> ":" <> padded_minute <>
      ":" <> padded_second <> " GMT"
  end

  defp weekday_name(1), do: "Mon"
  defp weekday_name(2), do: "Tue"
  defp weekday_name(3), do: "Wed"
  defp weekday_name(4), do: "Thu"
  defp weekday_name(5), do: "Fri"
  defp weekday_name(6), do: "Sat"
  defp weekday_name(7), do: "Sun"

  defp month_name(1), do: "Jan"
  defp month_name(2), do: "Feb"
  defp month_name(3), do: "Mar"
  defp month_name(4), do: "Apr"
  defp month_name(5), do: "May"
  defp month_name(6), do: "Jun"
  defp month_name(7), do: "Jul"
  defp month_name(8), do: "Aug"
  defp month_name(9), do: "Sep"
  defp month_name(10), do: "Oct"
  defp month_name(11), do: "Nov"
  defp month_name(12), do: "Dec"
end
